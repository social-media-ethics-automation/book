Traceback (most recent call last):
  File "C:\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\kmthayer\AppData\Roaming\Python\Python312\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#### TODO: make three loop variables here: ####
#   number_matched_urls
#   total_url_bias
#   total_url_reliability


# go through all the tweets
for post in recent_posts:
    
    print(post.content)

    # go through any embedded website links in the post
    for embed in post.embeds:
        # try to find the source website in our dataset
        matching_site = find_matching_site(embed.url)
        print(matching_site)

        # if we found the matching site, then we have info for it
        if(matching_site):

            # look up the bias and reliability for the site the url is from
            url_bias = media_bias_lookup[matching_site]
            url_reliability = media_reliability_lookup[matching_site]

            #### TODO: Update the three loop variables here #### 

            print("  bias: " + str(url_bias))
            print("  reliability: " + str(url_reliability))
        else:
            # We didn't have info on this site
            print("**did not recognize site!")

    print()
        

####  TODO: Use the loop variables to calculate the total number of urls #### 
#  we cold measure and then the average bias and reliability for those
# Then display them with the print statements below

print("--------------------------------------")
print("Total number of urls we could measure: ")
print("Average bias: ")
print("Average reliability: ")
------------------

----- stdout -----
Breaking news: A lovely cat took a nice long nap today!
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mAttributeError[0m                            Traceback (most recent call last)
Cell [1;32mIn[7], line 13[0m
[0;32m     10[0m [38;5;28mprint[39m(post[38;5;241m.[39mcontent)
[0;32m     12[0m [38;5;66;03m# go through any embedded website links in the post[39;00m
[1;32m---> 13[0m [38;5;28;01mfor[39;00m embed [38;5;129;01min[39;00m [43mpost[49m[38;5;241;43m.[39;49m[43membeds[49m:
[0;32m     14[0m     [38;5;66;03m# try to find the source website in our dataset[39;00m
[0;32m     15[0m     matching_site [38;5;241m=[39m find_matching_site(embed[38;5;241m.[39murl)
[0;32m     16[0m     [38;5;28mprint[39m(matching_site)

[1;31mAttributeError[0m: 'FakeMessage' object has no attribute 'embeds'

